// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: grpc/proto/products.proto

package obaid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductManagementClient is the client API for ProductManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductManagementClient interface {
	CreateNewProduct(ctx context.Context, in *NewProduct, opts ...grpc.CallOption) (*Product, error)
	GetProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ProductManagement_GetProductsClient, error)
	GetProductByID(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*Product, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	DeleteProduct(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewProductManagementClient(cc grpc.ClientConnInterface) ProductManagementClient {
	return &productManagementClient{cc}
}

func (c *productManagementClient) CreateNewProduct(ctx context.Context, in *NewProduct, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/obaid.ProductManagement/CreateNewProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) GetProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ProductManagement_GetProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductManagement_ServiceDesc.Streams[0], "/obaid.ProductManagement/GetProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &productManagementGetProductsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductManagement_GetProductsClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type productManagementGetProductsClient struct {
	grpc.ClientStream
}

func (x *productManagementGetProductsClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productManagementClient) GetProductByID(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/obaid.ProductManagement/GetProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/obaid.ProductManagement/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) DeleteProduct(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/obaid.ProductManagement/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductManagementServer is the server API for ProductManagement service.
// All implementations must embed UnimplementedProductManagementServer
// for forward compatibility
type ProductManagementServer interface {
	CreateNewProduct(context.Context, *NewProduct) (*Product, error)
	GetProducts(*emptypb.Empty, ProductManagement_GetProductsServer) error
	GetProductByID(context.Context, *ProductID) (*Product, error)
	UpdateProduct(context.Context, *Product) (*Product, error)
	DeleteProduct(context.Context, *ProductID) (*emptypb.Empty, error)
	mustEmbedUnimplementedProductManagementServer()
}

// UnimplementedProductManagementServer must be embedded to have forward compatible implementations.
type UnimplementedProductManagementServer struct {
}

func (UnimplementedProductManagementServer) CreateNewProduct(context.Context, *NewProduct) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewProduct not implemented")
}
func (UnimplementedProductManagementServer) GetProducts(*emptypb.Empty, ProductManagement_GetProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedProductManagementServer) GetProductByID(context.Context, *ProductID) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByID not implemented")
}
func (UnimplementedProductManagementServer) UpdateProduct(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductManagementServer) DeleteProduct(context.Context, *ProductID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductManagementServer) mustEmbedUnimplementedProductManagementServer() {}

// UnsafeProductManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductManagementServer will
// result in compilation errors.
type UnsafeProductManagementServer interface {
	mustEmbedUnimplementedProductManagementServer()
}

func RegisterProductManagementServer(s grpc.ServiceRegistrar, srv ProductManagementServer) {
	s.RegisterService(&ProductManagement_ServiceDesc, srv)
}

func _ProductManagement_CreateNewProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).CreateNewProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/obaid.ProductManagement/CreateNewProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).CreateNewProduct(ctx, req.(*NewProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_GetProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductManagementServer).GetProducts(m, &productManagementGetProductsServer{stream})
}

type ProductManagement_GetProductsServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type productManagementGetProductsServer struct {
	grpc.ServerStream
}

func (x *productManagementGetProductsServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductManagement_GetProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).GetProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/obaid.ProductManagement/GetProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).GetProductByID(ctx, req.(*ProductID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/obaid.ProductManagement/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/obaid.ProductManagement/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).DeleteProduct(ctx, req.(*ProductID))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductManagement_ServiceDesc is the grpc.ServiceDesc for ProductManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "obaid.ProductManagement",
	HandlerType: (*ProductManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewProduct",
			Handler:    _ProductManagement_CreateNewProduct_Handler,
		},
		{
			MethodName: "GetProductByID",
			Handler:    _ProductManagement_GetProductByID_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductManagement_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductManagement_DeleteProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProducts",
			Handler:       _ProductManagement_GetProducts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto/products.proto",
}
